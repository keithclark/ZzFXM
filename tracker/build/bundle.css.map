{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../About.svelte",
    "../../Button.svelte",
    "../../Channel.svelte",
    "../../Field.svelte",
    "../../InstrumentEditor.svelte",
    "../../InstrumentPicker.svelte",
    "../../KeyboardHelp.svelte",
    "../../Modal.svelte",
    "../../Pane.svelte",
    "../../PanningProperty.svelte",
    "../../PatternEditor.svelte",
    "../../PianoInput.svelte",
    "../../Property.svelte",
    "../../PropertyList.svelte",
    "../../SampleViewer.svelte",
    "../../SequenceEditor.svelte",
    "../../Slider.svelte",
    "../../SourceEditor.svelte",
    "../../TextProperty.svelte",
    "../../ToggleButton.svelte",
    "../../Toolbar.svelte"
  ],
  "sourcesContent": [
    "<script>\n\n  import { patterns, sequence, speed, title, selectedRow, selectedChannel, selectedPattern, selectedSequence, masterVolume, currentPlaybackPosition, songPlaying } from './stores.js';\n  import { serializeSong, createEmptySong, loadSongFromFile, loadSongFromUrl, loadSongFromString } from './services/SongService.js';\n  import { playPattern, playSong, stopSong, playNote } from './services/RendererService.js';\n  import { getCumlativeRowAtPosition } from './services/SequenceService.js';\n  import { adjustAttenuation, setNote } from './services/PatternService.js';\n  import { isInputElement } from './lib/utils.js';\n  import { NOTE_KEY_CODES, PATTERN_ROW_FINE_STEP, PATTERN_ROW_COARSE_STEP, ATTENUATION_FINE_STEP, ATTENUATION_COARSE_STEP} from './config.js';\n\n  import SequenceEditor from './components/SequenceEditor.svelte';\n\timport InstrumentEditor from './components/InstrumentEditor.svelte';\n\timport PatternEditor from './components/PatternEditor.svelte';\n  import TextProperty from './components/TextProperty.svelte';\n  import NumberProperty from './components/NumberProperty.svelte';\n  import Property from './components/Property.svelte'\n  import Toolbar from './components/Toolbar.svelte';\n  import Field from './components/Field.svelte';\n  import Button from './components/Button.svelte';\n\n  import ToggleButton from './components/ToggleButton.svelte';\n  import Slider from './components/Slider.svelte';\n  import Pane from './components/Pane.svelte';\n  import Modal from './components/Modal.svelte';\n  import KeyboardHelp from './components/KeyboardHelp.svelte';\n  import About from './components/About.svelte';\n  import SourceEditor from './components/SourceEditor.svelte';\n  import Preferences from './components/Preferences.svelte';\n  import SongProperties from './components/SongProperties.svelte';\n\n  let files;\n  let fileElem;\n  let showKeysHelpModal = false;\n  let showAboutModal = false;\n  let showSourceModal = false;\n  let showSettingsModal = false;\n  let showSongPropertiesModal = false;\n  let showPaino = window.matchMedia('(min-height: 500px)').matches;\n  let showInstruments = window.matchMedia('(min-height: 800px)').matches;\n\n  $: if (files) {\n    loadSong(loadSongFromFile, files[0]);\n    files = null;\n  }\n\n  $: patternStartPosition = getCumlativeRowAtPosition($selectedSequence);\n  $: patternPosition = patternStartPosition + $selectedRow;\n  $: if ($selectedSequence !== null) {\n    currentPlaybackPosition.set(patternPosition);\n  } else {\n    currentPlaybackPosition.set(-1);\n  }\n\n  const loadSong = (loader, src) => {\n    stopSong();\n    return loader(src)\n      .then(resetSongPosition)\n      .catch(err => alert(`Error loading ${src}\\n\\n${err.message}`));\n  }\n\n\n  const resetSongPosition = () => {\n    selectedSequence.set(0);\n    selectedPattern.set($sequence[0]);\n    selectedRow.set(0);\n  }\n\n  const resetPatternPosition = () => {\n    selectedRow.set(0);\n  }\n\n  const handlePatternSelect = () => {\n    stopSong();\n    currentPlaybackPosition.set(-1);\n    selectedSequence.set(null);\n  }\n\n  const handlePositionChange = () => {\n    selectedPattern.set($sequence[$selectedSequence]);\n  }\n\n  const handlePositionSelect = () => {\n    stopSong();\n    selectedPattern.set($sequence[$selectedSequence]);\n    selectedRow.set(0);\n  }\n\n  const handleLoadSongClick = () => {\n    fileElem.click();\n  }\n\n  const handleSaveSongClick = () => {\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(serializeSong()));\n    element.setAttribute('download', `${$title}.js`);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    element.remove();\n  }\n\n  const handleHelpClick = () => {\n    showKeysHelpModal = true;\n  }\n\n  const handleAboutClick = () => {\n    showAboutModal = true;\n  }\n\n  const handleKeyPress = event => {\n    const { key, shiftKey, altKey, ctrlKey, metaKey } = event;\n\n    // If the active element is a form input (button, input etc.) do nothing\n    if (isInputElement(document.activeElement)) {\n      return;\n    }\n\n    if (key === 'ArrowLeft') {\n      $selectedChannel--;\n    } else if (key === 'ArrowRight') {\n      $selectedChannel++;\n    } else if (key === 'ArrowUp') {\n      if (altKey) {\n        const step = shiftKey ? ATTENUATION_COARSE_STEP : ATTENUATION_FINE_STEP;\n        adjustAttenuation($selectedPattern, $selectedChannel, $selectedRow, step);\n      } else {\n        const step = shiftKey ? PATTERN_ROW_COARSE_STEP : PATTERN_ROW_FINE_STEP;\n        $selectedRow = Math.max(0, $selectedRow - step);\n      }\n    } else if (key === 'ArrowDown') {\n      if (altKey) {\n        const step = shiftKey ? ATTENUATION_COARSE_STEP : ATTENUATION_FINE_STEP;\n        adjustAttenuation($selectedPattern, $selectedChannel, $selectedRow, -step)\n      } else {\n        const step = shiftKey ? PATTERN_ROW_COARSE_STEP : PATTERN_ROW_FINE_STEP;\n        $selectedRow = Math.min($patterns[$selectedPattern][0].length - 3, $selectedRow + step);\n      }\n    } else if (key === ' ') {\n      setNote($selectedPattern, $selectedChannel, $selectedRow, -1);\n    } else if (key === 'Backspace') {\n      event.preventDefault();\n      setNote($selectedPattern, $selectedChannel, $selectedRow, 0);\n    } else if (key === 'Enter') {\n      if ($songPlaying) {\n        stopSong();\n      } else {\n        if (altKey) {\n          if (shiftKey) {\n            resetSongPosition();\n          }\n          playSong();\n        } else {\n          if (shiftKey) {\n            resetPatternPosition();\n          }\n          playPattern($selectedPattern);\n        }\n      }\n      event.preventDefault();\n    } else if (!shiftKey && !altKey && !metaKey && !ctrlKey) {\n      const note = NOTE_KEY_CODES[key];\n      if (note) {\n        setNote($selectedPattern, $selectedChannel, $selectedRow, note);\n        playNote($patterns[$selectedPattern][$selectedChannel][0] || 0, note);\n      }\n    }\n  }\n\n  const handleNewSongClick = () => {\n    stopSong();\n    createEmptySong();\n    resetSongPosition();\n  }\n\n  const handleSourceClick = () => {\n    showSourceModal = true;\n  }\n\n  const handlePianoToggleClick = () => {\n    showPaino = !showPaino;\n  }\n\n  const handleInstrumentsToggleClick = () => {\n    showInstruments = !showInstruments;\n  }\n\n  const handleSettingsClick = () => {\n    showSettingsModal = !showSettingsModal;\n  }\n\n  const handleSongPropertiesClick = () => {\n    showSongPropertiesModal = !showSongPropertiesModal;\n  }\n\n  const params = new URLSearchParams(location.search);\n\n  createEmptySong();\n  if (params.has('url')) {\n    loadSong(loadSongFromUrl, params.get('url'));\n  }\n</script>\n\n<main>\n  <Pane>\n    <div slot=\"head\">\n      <Toolbar>\n        <TextProperty label=\"Title\" bind:value={$title} />\n        <NumberProperty label=\"Speed\" bind:value={$speed} size={3} min={1} max={320} />\n        <Field label=\"File\">\n          <Button label=\"New\" on:click={handleNewSongClick} />\n          <Button label=\"Load\" on:click={handleLoadSongClick} />\n          <Button label=\"Save\" on:click={handleSaveSongClick} />\n          <Button label=\"Source\" on:click={handleSourceClick} />\n          <Button label=\"Properties\" on:click={handleSongPropertiesClick} />\n        </Field>\n        <Field label=\"Toggle Tools\">\n          <ToggleButton checked={showPaino} on:click={handlePianoToggleClick} label=\"Piano\" />\n          <ToggleButton checked={showInstruments} on:click={handleInstrumentsToggleClick} label=\"Instruments\" />\n        </Field>\n        <Property label=\"Master Volume\" let:id>\n          <Slider {id} min={0} max={1} step={.1} bind:value={$masterVolume} />\n        </Property>\n        <Field label=\"Help\">\n          <Button label=\"Settings\" on:click={handleSettingsClick} />\n          <Button label=\"About\" on:click={handleAboutClick} />\n          <Button label=\"Keys\" on:click={handleHelpClick} />\n        </Field>\n\n        <div class=\"outset\"></div>\n      </Toolbar>\n    </div>\n  </Pane>\n\n  <SequenceEditor bind:selectedPosition={$selectedSequence} on:select={handlePositionSelect} on:input={handlePositionChange} />\n\n  <PatternEditor piano={showPaino} bind:selectedChannel={$selectedChannel} bind:selectedRow={$selectedRow} bind:selectedPattern={$selectedPattern} on:patternselect={handlePatternSelect} />\n\n  {#if showInstruments}\n    <InstrumentEditor />\n  {/if}\n\n</main>\n\n<Modal title=\"Source\" bind:open={showSourceModal}>\n  <SourceEditor on:change={() => showSourceModal = false}/>\n</Modal>\n\n<Modal title=\"About\" bind:open={showAboutModal}>\n  <About />\n</Modal>\n\n<Modal title=\"Song Properties\" bind:open={showSongPropertiesModal}>\n  <SongProperties />\n</Modal>\n\n<Modal title=\"Settings\" bind:open={showSettingsModal}>\n  <Preferences />\n</Modal>\n\n<Modal title=\"Keyboard shortcuts\" bind:open={showKeysHelpModal}>\n  <KeyboardHelp />\n</Modal>\n\n<input type=\"file\" hidden bind:this={fileElem} bind:files>\n<svelte:window on:keydown={handleKeyPress} />\n\n<style>\n  main {\n    display: grid;\n    grid-template-rows: auto auto 1fr;\n    height: 100vh;\n    gap: var(--panel-spacing);\n    padding: var(--panel-spacing);\n    box-sizing: border-box;\n  }\n</style>\n",
    "<script>\n  import { version, repository } from '../../package.json';\n</script>\n\n<div>\n  <h1>ZzFXM Music Tracker</h1>\n  v{ version }\n  <p>by <a href=\"https://keithclark.co.uk\">Keith Clark</a></p>\n  <p>Source available at the <a target=\"_blank\" href=\"{repository.url}/tree/master/tools/tracker\">ZzFXM GitHub Repo</a></p>\n</div>\n\n<style>\ndiv {\n  text-align: center;\n}\nh1 {\n  background: linear-gradient(90deg, rgb(255,85,18), rgb(247,255,15) 25%, rgb(5,193,255) 50%, rgb(171,69,255) 75%, rgb(255,85,18));\n  background-size:2000px 2em;\n  background-repeat: repeat-x;\n  background-clip: text;\n  color: transparent;\n  filter: drop-shadow(1px 1px 0px #0004);\n  animation: 10s colorshock linear infinite;\n  font-size:250%;\n  letter-spacing: -0.06em;\n}\n@keyframes colorshock {\n  from {\n    background-position:2000px 0;\n  }\n}\n</style>",
    "<script>\nexport let hint = '';\nexport let label = '';\nexport let disabled = false;\nexport let keyboard = '';\n\nlet title;\n\n$: if (hint && keyboard) {\n  title = `${hint}\\n\\nShortcut: ${keyboard}`;\n} else if (hint) {\n  title = `${hint}`;\n} else if (keyboard) {\n  title = `Shortcut: ${keyboard}`;\n}\n</script>\n\n<button class=\"outset\" {disabled} {title} on:click>{ label }</button>\n\n<style>\n  button {\n    background-color: var(--button-color);\n    border: none;\n    display: inline-block;\n    padding: var(--input-padding) 8px;\n    font: inherit;\n    text-transform: uppercase;\n    margin: 0;\n    white-space: nowrap;\n    letter-spacing: inherit;\n  }\n  button[disabled] {\n    color:#0005;\n  }\n  button:not([disabled]):hover {\n    background-color: var(--button-color-hover);\n  }\n  button:not([disabled]):active {\n    background-color: var(--button-color-press);\n  }\n</style>",
    "<script>\nimport { instrumentsMeta } from '../stores.js';\nimport { getNoteName } from '../services/PatternService.js';\nimport { clamp } from '../lib/utils.js';\nimport PanningProperty from './PanningProperty.svelte';\nimport Toolbar from './Toolbar.svelte';\nimport Field from './Field.svelte';\n\nexport let data = [];\nexport let title = 'Track';\nexport let selectedRow = 0;\nexport let mute = false;\n\n$: scrollPos = `${-selectedRow * 18}px`;\n$: totalRows = data.length - 3;\n\nlet scrollSpeed = 0;\n\nconst handleScroll = event => {\n  const {deltaY, deltaMode} = event;\n  if (deltaMode === 0) {\n    const step = deltaY / 4 | 0;\n    selectedRow = clamp(selectedRow + step, 0, totalRows);\n  }\n}\n\nconst decelerate = () => {\n  if (Math.abs(scrollSpeed)>.2) {\n    requestAnimationFrame(decelerate);\n    selectedRow += scrollSpeed / 4 | 0;\n    scrollSpeed *= .85;\n  } else {\n    scrollSpeed = 0;\n  }\n}\n\nconst handleTouchStart = event => {\n  if (event.targetTouches.length > 1) {\n    return;\n  }\n  const startPos = event.targetTouches[0].screenY;\n  const startRow = selectedRow;\n  let prevPos = startPos;\n  scrollSpeed = 0;\n\n  const moveHandler = event => {\n    const pos = event.targetTouches[0].screenY;\n    const step = (pos - startPos) / 18 | 0;\n    scrollSpeed = prevPos - pos;\n    selectedRow = clamp(startRow - step, 0, totalRows);\n    prevPos = pos;\n  }\n\n  const endHandler = event => {\n    if (Math.abs(prevPos - startPos) < 5) {\n      event.target.focus();\n    } else if (Math.abs(scrollSpeed) > .1) {\n      decelerate();\n    }\n    window.removeEventListener('touchmove', moveHandler);\n    window.removeEventListener('touchend', endHandler);\n  }\n\n  window.addEventListener('touchmove',moveHandler )\n  window.addEventListener('touchend',endHandler )\n}\n</script>\n\n<div class:mute class=\"channel\">\n  <Toolbar>\n    <Field label={title}>\n      <select class=\"select\" bind:value={data[0]}>\n        {#each $instrumentsMeta as name, i}\n          <option value={i}>{name}</option>\n        {/each}\n      </select>\n    </Field>\n  </Toolbar>\n\n  <div class=\"noteList\" tabindex=\"0\" on:wheel={handleScroll} on:touchstart|preventDefault={handleTouchStart}>\n    <pre class=\"notes\" style=\"transform:translateY({scrollPos})\">{data.slice(2).map(note => `${getNoteName([1 + note | 0])} ${((note % 1) * 100).toFixed().padStart(2,'0')}`).join('\\n')}</pre>\n  </div>\n\n  <div class=\"outset\">\n    <PanningProperty bind:value={data[1]} />\n  </div>\n\n</div>\n\n<style>\n.select {\n  width: 100%;\n}\n.channel {\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  height: 100%;\n  width: 100%;\n}\n.noteList {\n  overflow: hidden;\n  position: relative;\n  background-image: linear-gradient(#fff 0, #fff 18px);\n  background-size:100% 18px;\n  background-repeat: no-repeat;\n  background-position: 0 50%;\n  text-align-last: justify;\n  line-height:18px;\n  width:100%;\n  box-sizing:border-box;\n}\n.notes {\n  pointer-events: none;\n  position: absolute;\n  top: 50%;\n  margin: -8px 0 0 0;\n  width:100%;\n  min-width:0;\n  padding:0 1em;\n  background-image: linear-gradient( #0001 18px, transparent 18px);\n  background-size:100% 72px;\n  white-space: pre-line;\n  will-change: transform;\n}\n.channel :global(.field) {\n  align-items: center!important;\n}\n.channel :global(.field__controls) {\n  width: 100% !important;\n}\n.mute {\n  background:repeating-linear-gradient(45deg, #0001 0, #0001 5px,#0000 5px, #0000 10px);\n}\n</style>\n",
    "<script>\n  export let label = ''\n</script>\n\n<div class=\"field outset\">\n  <span class=\"field__label embossed\">{ label }</span>\n  <span class=\"field__controls inset\">\n    <slot />\n  </span>\n</div>\n\n<style>\n  .field {\n    display: flex;\n    padding: var(--field-padding);\n    align-items: center;\n  }\n  .field__label {\n    white-space: nowrap;\n  }\n  .field__controls {\n    display: inline-flex;\n    flex-wrap: wrap;\n  }\n  .field__controls > :global(*) {\n    flex: 1\n  }\n</style>\n",
    "<script>\nimport { instrumentsMeta, patterns, instruments } from '../stores.js';\nimport { playNote } from '../services/RendererService.js';\nimport { getNoteName } from '../services/PatternService.js';\nimport { addInstrument, deleteInstrument, setInstrumentParams } from '../services/InstrumentService.js';\nimport { decodeInstrument, encodeInstrument } from 'zzfxm-song-encoder';\nimport { clamp } from '../lib/utils.js';\nimport Pane from './Pane.svelte';\nimport Toolbar from './Toolbar.svelte';\nimport Button from './Button.svelte';\nimport ToggleButton from './ToggleButton.svelte';\nimport Field from './Field.svelte';\nimport Property from './Property.svelte';\nimport TextProperty from './TextProperty.svelte';\nimport NumberProperty from './NumberProperty.svelte';\nimport SampleViewer from './SampleViewer.svelte';\nimport InstrumentPicker from './InstrumentPicker.svelte';\n\nexport let selected = 0;\n\nconst notelist = new Array(36).fill(0).map((value, index) => {\n  return {\n    id: index + 1,\n    label: getNoteName(index + 2)\n  }\n});\n\nconst shapeOptions = [\n  {id: 0, label: 'Sin'},\n  {id: 1, label: 'Triangle'},\n  {id: 2, label: 'Saw'},\n  {id: 3, label: 'Tan'},\n  {id: 4, label: 'Bit Noise'},\n];\n\nlet clipboard;\nlet showInstrumentPicker = false;\nlet playOnChange = true;\nlet testNote = 13;\nlet currentNote;\n\n$: selected = clamp(selected, 0, $instruments.length - 1);\n$: instrument = $instruments[selected];\n$: buffer = zzfxG(...instrument);\n$: usage = $patterns.map((pattern, i) => {\n  return pattern.some(channel => channel[0] === selected) && i\n}).filter(x => x !== false);\n\n\nconst playTestNote = async (instrument, note) => {\n  if (currentNote) {\n    currentNote.stop();\n  }\n  currentNote = await playNote(instrument, note);\n}\n\nconst handlePlayClick = () => {\n  playTestNote(selected, testNote);\n}\n\nconst handleChange = () => {\n  if (playOnChange) {\n    playTestNote(selected, testNote);\n  }\n}\n\nconst handleImportClick = () => {\n  let code = prompt('Zzfx Code', `zzfx(...[])`);\n  if (code) {\n    code = code.replace(/zzfx\\(\\.\\.\\.(\\[[\\w\\W]*?\\])\\)/, '$1');\n    setInstrumentParams(selected, decodeInstrument(code));\n  }\n}\n\nconst handleExportClick = () => {\n  prompt('Zzfx Code', `zzfx(...${encodeInstrument(instrument)})`);\n}\n\nconst handleAddClick = () => {\n  addInstrument([1,0]);\n  selected = $instruments.length - 1;\n}\n\nconst handleDeleteClick = () => {\n  if (usage.length > 0) {\n    alert(`This instrument is being used in patterns ${usage}.`)\n  } else {\n    deleteInstrument(selected);\n    selected = Math.min(selected,$instruments.length - 1);\n  }\n}\n\nconst handleSelectClick = () => {\n  showInstrumentPicker = true;\n}\n\nconst handleInstrumentSelect = e => {\n  setInstrumentParams(selected, e.detail.params)\n  $instrumentsMeta[selected] = e.detail.name\n}\n\nconst copy = () => {\n  clipboard = instrument.slice();\n}\n\nconst paste = () => {\n  $instruments[selected] = clipboard.slice();\n  $instruments = $instruments;\n}\n</script>\n\n\n<div class=\"splitView\">\n  <Pane>\n    <div slot=\"head\">\n      <Toolbar>\n        <Field label=\"Instruments\">\n          <Button label=\"Add\" on:click={handleAddClick} />\n          <Button label=\"Delete\" disabled={usage.length} on:click={handleDeleteClick} />\n          <Button label=\"Copy\" on:click={copy}  />\n          <Button label=\"Paste\" on:click={paste} disabled={!clipboard} />\n        </Field>\n      </Toolbar>\n    </div>\n    <select class=\"select\" bind:value={selected} size=\"2\">\n      {#each $instrumentsMeta as instrument, i}\n        <option value={i}>{i}: {instrument}</option>\n      {/each}\n    </select>\n  </Pane>\n\n  <Pane>\n    <div slot=\"head\">\n      <Toolbar>\n        <NumberProperty min={0} max={$instruments.length - 1} label=\"#\" bind:value={selected} />\n        <TextProperty label=\"Name\" bind:value={$instrumentsMeta[selected]} />\n        <Field label=\"Playback\">\n          <Button label=\"Play\" on:click={handlePlayClick} />\n          <select class=\"select\" bind:value={testNote}>\n            {#each notelist as note}\n              <option value={note.id}>{note.label}</option>\n            {/each}\n          </select>\n          <ToggleButton hint=\"Automatically play when changing properties\" label=\"Auto Play\" bind:checked={playOnChange} />\n        </Field>\n        <Field label=\"Parameters\">\n          <Button label=\"Import\" on:click={handleImportClick} />\n          <Button label=\"Export\" on:click={handleExportClick} />\n          <Button label=\"Library\" on:click={handleSelectClick} />\n        </Field>\n        <Field label=\"Pattern Usage\"><span class=\"usage output\">{usage.length ? usage : 'Unused'}</span></Field>\n        <div class=\"outset\"></div>\n      </Toolbar>\n    </div>\n\n    <div class=\"instrument\">\n      <div class=\"instrument__params\">\n        <NumberProperty size={4} label=\"Volume\" hint=\"Volume scale (percent)\" min=\"0\" max=\"1000000000\" step=\"0.1\" on:input={handleChange} bind:value={instrument[0]} />\n        <NumberProperty size={4} label=\"Frequency\" hint=\"Frequency of sound (Hz)\" min=\"-1000000000\" max=\"1000000000\" step=\"1\" on:input={handleChange} bind:value={instrument[2]} />\n        <Property label=\"Shape\">\n          <select class=\"select\" on:input={handleChange} bind:value={instrument[6]}>\n            {#each shapeOptions as option}\n              <option value={option.id}>{option.label}</option>\n            {/each}\n          </select>\n        </Property>\n        <NumberProperty size={4} label=\"Attack\" hint=\"Attack time, how fast sound starts (seconds)\" min=\"0\" max=\"3\" step=\"0.01\" on:input={handleChange} bind:value={instrument[3]} />\n        <NumberProperty size={4} label=\"Sustain\" hint=\"Sustain time, how long sound holds (seconds)\" min=\"0\" max=\"3\" step=\"0.01\" on:input={handleChange} bind:value={instrument[4]} />\n        <NumberProperty size={4} label=\"Release\" hint=\"Release time, how fast sound fades out (seconds)\" min=\"0\" max=\"3\" step=\"0.01\" on:input={handleChange} bind:value={instrument[5]} />\n        <NumberProperty size={4} label=\"Shape Curve\" hint=\"Squarenes of wave (0=square, 1=normal, 2=pointy)\" min=\"0\" max=\"1000000000\" step=\"0.1\" on:input={handleChange} bind:value={instrument[7]} />\n        <NumberProperty size={4} label=\"Slide\" hint=\"How much to slide frequency (kHz/s)\" min=\"-1000000000\" max=\"1000000000\" step=\"0.1\" on:input={handleChange} bind:value={instrument[8]} />\n        <NumberProperty size={4} label=\"Delta Slide\" hint=\"How much to change slide (kHz/s/s)\" min=\"-1000000000\" max=\"1000000000\" step=\"0.1\" on:input={handleChange} bind:value={instrument[9]} />\n        <NumberProperty size={4} label=\"Pitch Jump\" hint=\"Frequency of pitch jump (Hz)\" min=\"-1000000000\" max=\"1000000000\" step=\"10\" on:input={handleChange} bind:value={instrument[10]} />\n        <NumberProperty size={4} label=\"Pitch Jump Time\" hint=\"Time of pitch jump (seconds)\" min=\"-1000000000\" max=\"1000000000\" step=\"0.01\" on:input={handleChange} bind:value={instrument[11]} />\n        <NumberProperty size={4} label=\"Repeat Time\" hint=\"Resets some parameters periodically (seconds)\" min=\"-1000000000\" max=\"1000000000\" step=\"0.01\" on:input={handleChange} bind:value={instrument[12]} />\n        <NumberProperty size={4} label=\"Noise\" hint=\"How much random noise to add (percent)\" min=\"-1000000000\" max=\"1000000000\" step=\"0.1\" on:input={handleChange} bind:value={instrument[13]} />\n        <NumberProperty size={4} label=\"Modulation\" hint=\"Frequency of modulation wave, negative flips phase (Hz)\" min=\"-1000000000\" max=\"1000000000\" step=\"0.1\" on:input={handleChange} bind:value={instrument[14]} />\n        <NumberProperty size={4} label=\"Bit Crush\" hint=\"Resamples at a lower frequency in (samples*100)\" min=\"-1000000000\" max=\"1000000000\" step=\"0.1\" on:input={handleChange} bind:value={instrument[15]} />\n        <NumberProperty size={4} label=\"Delay\" hint=\"Overlap with itself for reverb and flanger effects (seconds)\" min=\"0\" max=\"1000000000\" step=\"0.01\" on:input={handleChange} bind:value={instrument[16]} />\n        <NumberProperty size={4} label=\"Sustain Volume\" hint=\"Volume level for sustain (percent)\" min=\"0\" max=\"1000000000\" step=\"0.01\" on:input={handleChange} bind:value={instrument[17]} />\n        <NumberProperty size={4} label=\"Decay\" hint=\"Decay time, how long to reach sustain after attack\" min=\"0\" max=\"1\" step=\"0.01\" on:input={handleChange} bind:value={instrument[18]} />\n        <NumberProperty size={4} label=\"Tremolo\" hint=\"Trembling effect, rate controlled by repeat time (precent)\" min=\"0\" max=\"1\" step=\"0.01\" on:input={handleChange} bind:value={instrument[19]} />\n        <div class=\"outset\"></div>\n        <div class=\"outset\"></div>\n      </div>\n      <div class=\"instrument__preview outset\">\n        <SampleViewer data={buffer} />\n      </div>\n    </div>\n  </Pane>\n</div>\n\n<InstrumentPicker bind:open={showInstrumentPicker} on:select={handleInstrumentSelect} />\n\n<style>\n.instrument {\n  display: flex;\n}\n\n.instrument__params {\n  display: grid;\n  grid-template-columns: repeat(3, 14em);\n}\n\n.instrument__preview {\n  flex: 1;\n}\n\n.usage {\n  min-width: 8em;\n  max-width: 17em;\n  overflow: auto;\n}\n</style>",
    "<script>\nimport { playSound } from '../services/RendererService';\nimport { createEventDispatcher } from 'svelte';\nimport Modal from './Modal.svelte';\nimport Button from './Button.svelte';\nimport { percussion, keyboards, wind } from 'zzfxm-instruments';\n\nexport let open = false;\n\nconst dispatch = createEventDispatcher();\n\nconst format = v => {\n  return v.substr(0,1).toUpperCase() + v.substr(1).replace(/[A-Z0-9]/g, ' $&')\n}\n\nconst instruments = Object.entries({percussion, keyboards, wind}).map(([name, items]) => ({\n  label: format(name),\n  instruments: Object.entries(items).map(([name, value]) => ({\n      name: format(name),\n      params: value\n    })\n  )\n}));\n\nlet group = instruments[0];\nlet selection = null;\n\n$: if (open) {\n  selection = null\n}\n\nconst handleChange = () => {\n  if (selection) {\n    playSound(selection.params);\n  }\n}\n\nconst handleSelectClick = () => {\n  dispatch('select', selection);\n  open = false;\n  selection = null;\n}\n</script>\n\n<Modal title=\"Select an instrument\" bind:open={open}>\n  <div class=\"splitView\">\n    <div class=\"inset\">\n      <select class=\"select\" size=\"2\" bind:value={group}>\n        {#each instruments as group}\n          <option value={group}>{group.label}</option>\n        {/each}\n      </select>\n    </div>\n    <div class=\"inset\">\n      <select class=\"select\" size=\"2\" bind:value={selection} on:change={handleChange}>\n        {#each group.instruments as instrument (instrument)}\n          <option value={instrument}>{instrument.name}</option>\n        {/each}\n      </select>\n    </div>\n  </div>\n  <span slot=\"controls\">\n    <Button label=\"Select\" disabled={!selection} on:click={handleSelectClick} />\n  </span>\n</Modal>\n\n<style>\n.splitView,.select {\n  width:100%;\n  height:100%;\n}\n.splitView {\n  height: 20em;\n}\n</style>",
    "<script>\n  import { PATTERN_ROW_COARSE_STEP } from '../config.js';\n\n\n  const isMac = navigator.userAgent.indexOf('Mac OS X') > -1;\n\n  const SHIFT_KEY = '⇧';\n  const ALT_KEY = isMac ? '⌥' : 'ALT';\n  const UP_KEY = isMac ? '▲' : 'ꜛ';\n  const DOWN_KEY = isMac ? '▼' : 'ꜜ';\n  const SPACE_KEY = 'SPACE';\n  const BACKSPACE_KEY = '←'\n  const keymap = [\n    {\n      name: 'Playback',\n      shortcuts: [\n        { keys: ['ENTER'], desc: 'Play / Stop the current pattern' },\n        { keys: [ALT_KEY, 'ENTER'], desc: 'Play / Stop song' },\n        { keys: [SHIFT_KEY, 'ENTER'], desc: 'Play the current pattern from the beginning' },\n        { keys: [ALT_KEY, SHIFT_KEY, 'ENTER'], desc: 'Play song from the beginning' },\n      ]\n    },\n    {\n      name: 'Editing',\n      shortcuts: [\n        { keys: [UP_KEY], desc: 'Move up one row in the pattern' },\n        { keys: [DOWN_KEY], desc: 'Move down one row in the pattern' },\n        { keys: [SHIFT_KEY, UP_KEY], desc: `Move up ${PATTERN_ROW_COARSE_STEP} rows in the pattern` },\n        { keys: [SHIFT_KEY, DOWN_KEY], desc: `Move down ${PATTERN_ROW_COARSE_STEP} rows in the pattern` },\n        { keys: [ALT_KEY, UP_KEY], desc: 'Increase note attenuation (fine)' },\n        { keys: [ALT_KEY, DOWN_KEY], desc: 'Decrease note attenuation (fine)' },\n        { keys: [ALT_KEY, SHIFT_KEY, UP_KEY], desc: 'Increase note attenuation (coarse)' },\n        { keys: [ALT_KEY, SHIFT_KEY, DOWN_KEY], desc: 'Decrease note attenuation (coarse)' },\n        { keys: [SPACE_KEY], desc: 'Release note'},\n        { keys: [BACKSPACE_KEY], desc: 'Clear note'}\n\n      ]\n    }\n  ];\n\n</script>\n\n{#each keymap as group}\n  {group.name}\n  <dl>\n    {#each group.shortcuts as shortcut}\n      <dt>\n        {#each shortcut.keys as key, i}\n          {#if i}&nbsp;+&nbsp;{/if}<kbd>{key}</kbd>\n        {/each}\n      </dt>\n      <dd>{shortcut.desc}</dd>\n    {/each}\n  </dl>\n{/each}\n\n\n<style>\n  kbd {\n    padding: 2px 4px;\n    background: #fff;\n    box-shadow: 0 1px 0px 1px #888;\n    border-radius: 2px;\n    letter-spacing: 0;\n    font: 12px / 1.25 Arial;\n  }\n  dl {\n    display: grid;\n    grid-template-columns: 15em auto;\n    gap: var(--modal-spacing);\n  }\n  dt {\n    word-spacing: -0.25em;\n    width: auto;\n    color: #444;\n  }\n  dd {\n    margin:0;\n  }\n</style>",
    "<script>\nimport Button from './Button.svelte';\nimport { fade, fly } from 'svelte/transition';\n\nexport let open = false;\nexport let title = '';\n\nconst handleKeyPress = e => {\n  if (!open) {\n    return;\n  }\n  if (e.key === 'Escape') {\n    close();\n    e.preventDefault();\n  }\n};\n\nconst close = () => {\n  open = false;\n};\n</script>\n\n{#if open}\n  <div class=\"overlay\" transition:fade={{duration: 150}}></div>\n  <dialog class=\"modal\" transition:fly={{duration: 150, y: 10}}>\n    <div class=\"modal__header outset embossed\">\n      {title} <Button label=\"×\" on:click={close} />\n    </div>\n    <div class=\"modal__body outset\"><slot /></div>\n  </dialog>\n{/if}\n\n<svelte:window on:keydown={handleKeyPress}/>\n\n<style>\n.modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  width: 500px;\n  max-height: calc(100vh - 32px);\n  transform: translate(-50%,-50%);\n  box-shadow: 0 2px 5px 2px #0008;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  z-index: 1;\n  border: none;\n  margin: 0;\n  padding: 0;\n}\n.modal__header {\n  padding: var(--modal-spacing);\n}\n.modal__header {\n  --outset-color: var(--toolbar-color);\n  display: grid;\n  grid-template-columns: 1fr auto;\n  align-items: center;\n}\n.modal__body {\n  padding: var(--panel-spacing);\n  background: var(--body-color);\n  overflow: auto;\n}\n.overlay {\n  content: '';\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: #0006;\n}\n</style>\n",
    "<div class=\"pane inset\">\n  <slot name=\"head\" />\n  <slot />\n</div>\n\n<style>\n.pane > :global([slot=\"head\"]) {\n  --outset-color: var(--toolbar-color);\n}\n.pane {\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n}\n</style>",
    "<script>\nimport Slider from './Slider.svelte';\n\nexport let value = 0;\n</script>\n\n<div>\n  <Slider step={.1} min={-1} max={1} list=\"stops\" bind:value />\n  <datalist id=\"stops\">\n    <option value=\"-1\" label=\"L\">\n    <option value=\"0\" label=\"C\">\n    <option value=\"1\" label=\"R\">\n  </datalist>\n</div>\n\n<style>\n  datalist {\n    display: flex;\n    justify-content: space-between;\n    padding: 0 14px;\n  }\n  option {\n    font-size: 80%;\n    padding:0 2px\n  }\n</style>\n",
    "<script>\nimport { patterns, sequence, channelMeters, patternsMeta, songPlaying, patternMuteStates } from '../stores.js';\nimport { addPattern, deletePattern, addChannel, deleteChannel, addRow, deleteRow, createTrack, createPattern, clearRow, setPatternData } from '../services/PatternService.js';\nimport { playPattern, stopSong } from '../services/RendererService.js';\nimport { createEventDispatcher } from 'svelte';\nimport { clamp, deepClone } from '../lib/utils.js';\nimport Channel from './Channel.svelte';\nimport Pane from './Pane.svelte';\nimport Toolbar from './Toolbar.svelte';\nimport Field from './Field.svelte';\nimport Button from './Button.svelte';\nimport TextProperty from './TextProperty.svelte';\nimport NumberProperty from './NumberProperty.svelte';\nimport PianoInput from './PianoInput.svelte';\nimport ToggleButton from './ToggleButton.svelte';\nimport PlayButton from './PlayButton.svelte';\n\nexport let selectedChannel = 0;\nexport let selectedRow = 0;\nexport let selectedPattern = 0;\nexport let piano = false;\n\nlet channelClipboard;\nlet patternClipboard;\n\n$: patternCount = $patterns.length;\n$: channelCount = $patterns[selectedPattern].length;\n$: selectedPattern = clamp(selectedPattern, 0, $patterns.length - 1);\n$: selectedChannel = clamp(selectedChannel, 0, $patterns[selectedPattern].length - 1);\n$: selectedRow = clamp(selectedRow, 0, $patterns[selectedPattern][0].length - 3) | 0;\n\n\n$: usage = $sequence.map((pattern, i) => {\n  return pattern === selectedPattern && i\n}).filter(x => x !== false);\n\n\nconst dispatch = createEventDispatcher();\n\nconst channelElems = [];\n\n\nconst handleAddPatternClick = () => {\n  selectedPattern = addPattern(createPattern(3, 64));\n}\n\nconst handleDeletePatternClick = () => {\n  deletePattern(selectedPattern);\n}\n\nconst handleAddRowClick = () => {\n  selectedRow = addRow(selectedPattern);\n}\n\nconst handleDeleteRowClick = () => {\n  deleteRow(selectedPattern, selectedRow);\n}\n\nconst handleClearRowClick = () => {\n  clearRow(selectedPattern, selectedRow);\n}\n\nconst moveChannelLeft = () => {\n  swapChannels(selectedChannel, --selectedChannel);\n}\n\nconst moveChannelRight = () => {\n  swapChannels(selectedChannel, ++selectedChannel);\n}\n\nconst handleAddChannelClick = () => {\n  selectedChannel = addChannel(selectedPattern);\n}\n\nconst deleteChannelClick = () => {\n  deleteChannel(selectedPattern, selectedChannel);\n}\n\nconst clearChannel = () => {\n  $patterns[selectedPattern][selectedChannel].fill(0, 2);\n  $patterns[selectedPattern] = $patterns[selectedPattern];\n}\n\nconst swapChannels = (a, b) => {\n  const channels = $patterns[selectedPattern].slice();\n  [channels[a], channels[b]] = [channels[b], channels[a]];\n  $patterns[selectedPattern] = channels;\n}\n\nconst copyChannel = () => {\n  channelClipboard = $patterns[selectedPattern][selectedChannel].slice();\n}\n\nconst pasteChannel = () => {\n  $patterns[selectedPattern][selectedChannel] = channelClipboard.slice();\n  $patterns[selectedPattern] = $patterns[selectedPattern];\n}\n\nconst handleCopyPatternClick = () => {\n  patternClipboard = deepClone($patterns[selectedPattern]);\n}\n\nconst handlePastePatternClick = () => {\n  setPatternData(selectedPattern, deepClone(patternClipboard));\n}\n\nconst handlePatternChange = () => {\n  dispatch('patternselect');\n  selectedRow = 0;\n}\n\nconst togglePlayPatternClick = () => {\n  if ($songPlaying) {\n    stopSong()\n  } else {\n    playPattern(selectedPattern);\n  }\n}\n\nconst handleUnmuteAllClick = () => {\n  $patternMuteStates[selectedPattern] = new Array(channelCount).fill(false);;\n}\n\nconst handleSoloClick = () => {\n  const muteState = new Array(channelCount).fill(true);\n  muteState[selectedChannel] = false;\n  $patternMuteStates[selectedPattern] = muteState;\n}\n\nconst handleMuteToggleClick = () => {\n  $patternMuteStates[selectedPattern][selectedChannel] = !$patternMuteStates[selectedPattern][selectedChannel]\n}\n</script>\n\n\n<div class=\"splitView\">\n  <Pane>\n    <div slot=\"head\">\n      <Toolbar>\n        <Field label=\"Patterns\">\n          <Button label=\"Add\" on:click={handleAddPatternClick} />\n          <Button label=\"Delete\" disabled={usage.length} on:click={handleDeletePatternClick} />\n          <Button label=\"Copy\" on:click={handleCopyPatternClick} />\n          <Button label=\"Paste\" disabled={!patternClipboard} on:click={handlePastePatternClick} />\n        </Field>\n      </Toolbar>\n    </div>\n    <select class=\"select\" on:input={handlePatternChange} bind:value={selectedPattern} size=\"2\">\n      {#each $patterns as pattern, i}\n        <option value={i}>{i}: {$patternMuteStates[i].includes(true) ? '[M]':''} {$patternsMeta[i]}</option>\n      {/each}\n    </select>\n  </Pane>\n\n  <Pane>\n    <div slot=\"head\">\n      <Toolbar>\n        <NumberProperty label=\"#\" max={patternCount} bind:value={selectedPattern} on:input={handlePatternChange}></NumberProperty>\n        <TextProperty label=\"Name\" bind:value={$patternsMeta[selectedPattern]}></TextProperty>\n        <Field label=\"Playback\">\n          <PlayButton playing={$songPlaying} keyboard=\"ENTER\" on:click={togglePlayPatternClick} />\n        </Field>\n        <Field label=\"Track\">\n          <Button on:click={handleAddChannelClick} label=\"Add\" />\n          <Button disabled={channelCount === 1} on:click={deleteChannelClick} label=\"Delete\" />\n          <Button on:click={clearChannel} label=\"Clear\" />\n          <Button on:click={copyChannel} label=\"Copy\" />\n          <Button disabled={!channelClipboard} on:click={pasteChannel} label=\"Paste\" />\n          <Button disabled={channelCount === 1 || selectedChannel === 0} on:click={moveChannelLeft} label=\"Move Left\" />\n          <Button disabled={channelCount === 1 || selectedChannel === channelCount - 1} on:click={moveChannelRight} label=\"Move Right\" />\n        </Field>\n        <Field label=\"Track Mute\">\n          <ToggleButton bind:checked={$patternMuteStates[selectedPattern][selectedChannel]} on:click={handleMuteToggleClick} label=\"Mute\" />\n          <Button on:click={handleSoloClick} label=\"Solo\" />\n          <Button on:click={handleUnmuteAllClick} label=\"Unmute All\" />\n        </Field>\n        <Field label=\"Row\">\n          <Button on:click={handleAddRowClick} label=\"Add\" />\n          <Button disabled={channelCount === 1} on:click={handleDeleteRowClick} label=\"Delete\" />\n          <Button label=\"Clear\" on:click={handleClearRowClick} />\n        </Field>\n        <div class=\"outset\"></div>\n      </Toolbar>\n    </div>\n    <div class=\"channels outset\">\n      {#each $patterns[selectedPattern] as channel, i}\n        <div class=\"channel inset\" bind:this={channelElems[i]} on:focusin={()=>selectedChannel = i} class:selected={i==selectedChannel}>\n          <Channel on:rowselect bind:mute={$patternMuteStates[selectedPattern][i]} title={`Track ${i}`} bind:selectedRow={selectedRow} bind:data={channel}></Channel>\n          <div class=\"level\" style=\"transform:scaleY({$channelMeters[i] || 0})\"></div>\n        </div>\n      {/each}\n    </div>\n    {#if piano}\n      <PianoInput />\n    {/if}\n  </Pane>\n</div>\n\n<style>\n  select {\n    display: block;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n  }\n  .selected {\n    background: var(--active-selection-color);\n  }\n  .channels {\n    display: grid;\n    grid-auto-flow: column;\n    grid-auto-columns: minmax(120px, 1fr);\n    overflow: auto;\n    gap: 10px;\n    padding: 10px\n  }\n  .channel {\n    position:relative;\n  }\n  .level {\n    position: absolute;\n    width: 32px;\n    background: linear-gradient(#fc0, #0f0);\n    bottom: 50%;\n    left: calc(50% - 16px);\n    height: 150px;\n    transform-origin: 50% 100%;\n    will-change: transform;\n  }\n</style>\n",
    "<script>\nimport { NOTE_KEY_CODES } from '../config.js';\n\n$: keys = Object.entries(NOTE_KEY_CODES).sort((a,b) => a[1] - b[1]).map(([x]) => x);\n\nconst handleClick = event => {\n  const { target, button } = event;\n  if (button === 0) {\n    target.focus()\n    const event = new KeyboardEvent('keydown', {\n      key: target.dataset.note\n    });\n    window.dispatchEvent(event);\n  }\n};\n</script>\n\n<div>\n  {#each keys as key}\n    <span tabindex=\"0\" data-note={key} on:mousedown={handleClick}>\n      {key.toUpperCase()}\n    </span>\n  {/each}\n</div>\n\n<style>\n  div {\n    display: flex;\n    align-items: flex-start;\n    padding: var(--modal-spacing);\n  }\n  span {\n    padding-top: 76px;\n    padding-bottom: 4px;\n    background-color: #eee;\n    color:#888;\n    border-bottom-left-radius: 4px;\n    border-bottom-right-radius: 4px;\n    text-align: center;\n    box-shadow: 0 0 0px 1px #0006;\n    flex: 1;\n  }\n  span:nth-child(12n+2),\n  span:nth-child(12n+4),\n  span:nth-child(12n+7),\n  span:nth-child(12n+9),\n  span:nth-child(12n+11) {\n    background-color: #222;\n    padding-top: 40px;\n    margin: 0 -11px;\n    flex: .75;\n    z-index: 1;\n    box-shadow: 1px 1px 1px 1px #0006;\n    margin: 0 -1.75%;\n  }\n  span:hover {\n    filter:contrast(.7)\n  }\n  span + span {\n    margin-left: 1px;\n  }\n</style>\n",
    "<script>\n  import { createElementId } from '../services/DomService.js';\n\n  export let label = '';\n  export let hint = null;\n\n  let id = createElementId();\n</script>\n\n<div class=\"property outset\" title={hint}>\n  <label for={id} class=\"property__label embossed\">{ label }</label>\n  <span class=\"property__controls inset\">\n    <slot {id} />\n  </span>\n</div>\n\n<style>\n  .property {\n    display: flex;\n    padding: var(--field-padding);\n    align-items: center;\n  }\n  .property__label {\n    flex: 1;\n    white-space: nowrap;\n    padding-right:6px;\n  }\n  .property__controls {\n    display: inline-flex;\n  }\n</style>\n",
    "<script>\n  export let label = '';\n</script>\n\n<div class=\"propertyList\">\n  <div class=\"propertyList__label\">{ label }</div>\n  <div class=\"propertyList__properties inset\">\n    <slot />\n  </div>\n</div>\n\n<style>\n  .propertyList + .propertyList {\n    margin-top: var(--panel-spacing)\n  }\n  .propertyList__label {\n    padding: var(--field-padding);\n  }\n</style>",
    "<script>\nimport { onDestroy, onMount } from \"svelte\";\n\nlet canvas;\nlet debounce = false;\nlet canvasWidth;\nlet canvasHeight;\n\nexport let data;\n\n$: if (data){\n  generateSampleView();\n}\n\nif ('ResizeObserver' in window) {\n  const resizeObserver = new ResizeObserver(entries => {\n    for (const entry of entries) {\n      const {width, height} = entry.contentRect;\n      canvasWidth = width;\n      canvasHeight = height;\n\n      if (!debounce) {\n        debounce = true;\n        generateSampleView();\n        setTimeout(() => {\n          generateSampleView();\n          debounce = false;\n        }, 500);\n      }\n    }\n  });\n\n  onMount(() => {\n    resizeObserver.observe(canvas.parentElement);\n  });\n\n  onDestroy(() => {\n    resizeObserver.unobserve(canvas.parentElement);\n  });\n\n} else {\n  // Browser doesn't support ResizeObserver so let's used the initial values\n  // so the user can see _something_.\n  onMount(() => {\n    canvasWidth = canvas.parentElement.clientWidth;\n    canvasHeight = canvas.parentElement.clientHeight;\n  });\n}\n\nconst generateSampleView = () => {\n  if (!canvas) {\n    return\n  }\n  const context = canvas.getContext('2d');\n  canvas.height = canvasHeight;\n  canvas.width = canvasWidth;\n  context.strokeStyle = '#0004';\n  context.beginPath();\n\n  context.moveTo(0, canvasHeight / 2 - .5);\n  context.lineTo(canvasWidth, canvasHeight / 2 -.5);\n  context.stroke();\n  context.closePath();\n\n  context.strokeStyle = '#062';\n  context.beginPath();\n  for (let c = 0; c < canvasWidth; c += 2) {\n    const p = c * (data.length / canvasWidth) | 0;\n    const y = (.5 + data[p]) * canvasHeight | 0;\n    if (c === 0) {\n      context.moveTo(0, y);\n    } else {\n      context.lineTo(c - .5, y);\n    }\n  }\n  context.stroke();\n  context.closePath();\n}\n\n</script>\n\n<div>\n  <canvas class=\"inset\" bind:this={canvas}></canvas>\n</div>\n\n<style>\n  div {\n    position: relative;\n    width: 100%;\n    height: 100%;\n  }\n  canvas {\n    position:absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: var(--field-padding) solid var(--outset-color)\n  }\n</style>\n",
    "<script>\nimport { sequence, patterns, currentPlaybackPosition, songPlaying } from '../stores.js';\nimport { playSong, stopSong } from '../services/RendererService.js';\nimport { createEventDispatcher, onDestroy, onMount } from 'svelte';\nimport Field from './Field.svelte';\nimport PlayButton from './PlayButton.svelte';\nimport Button from './Button.svelte';\nimport Toolbar from './Toolbar.svelte';\nimport Pane from './Pane.svelte';\n\nexport let selectedPosition = 0;\n\nlet markerElem;\nlet scrollElem;\nlet observer;\nlet userIsScrolling = false;\n\nconst dispatch = createEventDispatcher();\n\n\nconst handleAddClick = () => {\n  $sequence = [...$sequence, 0];\n  selectedPosition = $sequence.length - 1;\n  dispatch('select');\n}\n\nconst handleDeleteClick = () => {\n  $sequence = [...$sequence.slice(0, selectedPosition), ...$sequence.slice(selectedPosition + 1)];\n  selectedPosition = Math.min(selectedPosition, $sequence.length - 1);\n}\n\nconst togglePlaySongClick = () => {\n  if ($songPlaying) {\n    stopSong();\n  } else {\n    playSong();\n  }\n}\n\nconst select = position => {\n  selectedPosition = position;\n  dispatch('select');\n}\n\nconst moveLeft = () => {\n  $sequence = [\n    ...$sequence.slice(0, selectedPosition - 1),\n    $sequence[selectedPosition],\n    $sequence[selectedPosition-1],\n    ...$sequence.slice(selectedPosition + 1)\n  ];\n  selectedPosition--;\n}\n\nconst moveRight = () => {\n  $sequence = [\n    ...$sequence.slice(0, selectedPosition),\n    $sequence[selectedPosition+1],\n    $sequence[selectedPosition],\n    ...$sequence.slice(selectedPosition + 2)\n  ];\n  selectedPosition++;\n}\n\nconst handleUserScroll = () => {\n  if (!userIsScrolling) {\n    setTimeout(() => userIsScrolling = false, 500);\n    userIsScrolling = true;\n  }\n}\n\nconst color = seq => `hsl(${90+seq*20},35%,50%)`;\n\n$: hasSelection = selectedPosition !== null;\n\n// Ensure the position marker is always visible when the song is playing by\n// scrolling it into view.\n$: if (markerElem) {\n  if ($songPlaying) {\n    observer.observe(markerElem);\n  } else {\n    observer.unobserve(markerElem);\n  }\n}\n\nonMount(() => {\n  observer = new IntersectionObserver(entries => {\n    if (!entries[0].isIntersecting && !userIsScrolling) {\n      markerElem.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'center'\n      })\n    }\n  }, {\n    root: scrollElem,\n    threshold: [0, 1]\n  });\n\n  // Mark that the user started scrolling so we don't override their input and\n  // scroll the marker back into view.\n  scrollElem.addEventListener('scroll', handleUserScroll);\n});\n\nonDestroy(() => {\n  observer.disconnect();\n  scrollElem.removeEventListener('scroll', handleUserScroll);\n});\n\n</script>\n\n<Pane>\n  <div slot=\"head\">\n    <Toolbar>\n      <Field label=\"Sequence\">\n        <Button label=\"Add\" on:click={handleAddClick} />\n        <Button label=\"Delete\" disabled={!hasSelection} on:click={handleDeleteClick} />\n        <Button label=\"Move Left\" disabled={!hasSelection || selectedPosition === 0} on:click={moveLeft} />\n        <Button label=\"Move Right\" disabled={!hasSelection || selectedPosition === $sequence.length - 1}  on:click={moveRight} />\n      </Field>\n      <Field label=\"Playback\">\n        <PlayButton playing={$songPlaying} keyboard=\"ALT + ENTER\" on:click={togglePlaySongClick} />\n      </Field>\n      <div class=\"outset\"></div>\n    </Toolbar>\n  </div>\n\n  <div class=\"sequence\" bind:this={scrollElem}>\n    <div class=\"sequence__patterns\">\n      <div class=\"marker\" style=\"transform:translateX({$currentPlaybackPosition}px\" bind:this={markerElem}></div>\n      {#each $sequence as sequence, i}\n        <div on:click={()=>select(i)} class:selected={i === selectedPosition} class=\"pattern\" style=\"background: { color(sequence) }; max-width: { $patterns[sequence][0].length - 2 }px;min-width: { $patterns[sequence][0].length - 2}px\">\n          {#if i === selectedPosition}\n            <select class=\"select\" bind:value={sequence} on:input>\n              {#each $patterns as pattern, i}\n                <option value={i}>{i}</option>\n              {/each}\n            </select>\n          {:else}\n            {sequence}\n          {/if}\n        </div>\n      {/each}\n    </div>\n  </div>\n</Pane>\n\n<style>\n  .sequence {\n    overflow: auto;\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n  }\n  .sequence::-webkit-scrollbar {\n    height: 0px;\n    background: transparent;\n  }\n  .sequence__patterns {\n    display: flex;\n    padding: var(--field-padding);\n    position: relative;\n  }\n  .pattern {\n    text-align: center;\n    border: 1px solid #0004;\n    border-radius: 4px;\n    padding: var(--field-padding);\n  }\n  .selected {\n    border-color: var(--focus-ring-color);\n    width: auto !important;\n    line-height: inherit;\n  }\n  .marker {\n    position:absolute;\n    width:3px;\n    top:0;\n    bottom:0;\n    margin-left:-1px;\n    background:#f008;\n    will-change: transform;\n  }\n  .select {\n    background-color: #fffa;\n    border-radius: 2px;\n    box-shadow: 0 0 1px #000;\n  }\n</style>\n",
    "<script>\n  export let id = null;\n  export let step = 1;\n  export let min = 0;\n  export let max = 1;\n  export let list = null;\n  export let value;\n</script>\n\n<input type=\"range\" {id} {step} {min} {max} {list} bind:value>\n\n<style>\n  input {\n    display: block;\n    margin: 0;\n    width: 100%;\n    padding: 4px;\n    height: 21px;\n    background-color: transparent;\n    -webkit-appearance: none;\n  }\n  input:focus {\n    outline: none;\n  }\n  input::-webkit-slider-runnable-track {\n    background: #777;\n    box-shadow: inset -1px -1px 0 #fff8, inset 1px 1px 0 #0003;\n    height: 6px;\n  }\n  input::-moz-range-track {\n    background: #777;\n    box-shadow: inset -1px -1px 0 #fff8, inset 1px 1px 0 #0003;\n    height: 6px;\n  }\n  input::-webkit-slider-thumb {\n    margin-top: -6px;\n    width: 30px;\n    height: 17px;\n    background: linear-gradient(90deg,#555 13px,  #87e6eb 15px,  #555 17px);\n    box-shadow: -1px -1px 0 #fff4, inset -1px -1px 0 #0004, 0px 1px 4px #000c;\n    -webkit-appearance: none;\n  }\n  input::-moz-range-thumb {\n    width: 30px;\n    height: 17px;\n    border: none;\n    border-radius: 0;\n    background: linear-gradient(90deg,#555 13px,  #87e6eb 15px,  #555 17px);\n    box-shadow: -1px -1px 0 #fff4, inset -1px -1px 0 #0004, 0px 1px 4px #000c;\n  }\n</style>",
    "<script>\n  import Button from './Button.svelte';\n  import { serializeSong, loadSongFromString } from '../services/SongService.js';\n  import { createEventDispatcher, onMount } from 'svelte';\n\n  let src;\n  let error;\n\n  const dispatch = createEventDispatcher()\n\n  onMount(()=> {\n    src = serializeSong();\n    error = null;\n  });\n\n  const setClick = () => {\n    try {\n      loadSongFromString(src);\n      dispatch('change');\n    } catch (e) {\n      error = e.message;\n    }\n  }\n</script>\n\n<div class=\"wrap\">\n  <div class=\"inset\">\n    <textarea class=\"inset input\" bind:value={src}></textarea>\n  </div>\n  {#if error}\n    <span>Error: {error}</span>\n  {/if}\n  <span>\n    <Button label=\"Apply\" on:click={setClick} />\n  </span>\n</div>\n\n\n<style>\n.wrap {\n  display:flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  min-height: 20em;\n  gap: var(--panel-spacing);\n}\n.inset {\n  flex:1;\n}\ntextarea {\n  width: 100%;\n  height: 100%;\n  white-space: pre-line;\n  word-break: break-all;\n  resize: none;\n}\n</style>\n",
    "<script>\n  import Property from './Property.svelte';\n  export let label = '';\n  export let value = '';\n  export let hint = '';\n  export let size = 14;\n  export let multiline = false;\n</script>\n\n<Property {label} {hint} let:id={id}>\n  {#if multiline}\n    <textarea {id} style=\"width: {size+1}ch\" rows=\"5\" spellcheck=\"false\" class=\"input\" bind:value={value}></textarea>\n  {:else}\n    <input {id} style=\"width: {size+1}ch\" spellcheck=\"false\" type=\"text\" class=\"input\" bind:value={value}>\n  {/if}\n</Property>\n\n<style>\n  textarea {\n    resize: none;\n  }\n</style>\n",
    "<script>\nimport Button from './Button.svelte';\n\nexport let hint = '';\nexport let label = '';\nexport let disabled = false;\nexport let keyboard = '';\nexport let checked = false;\n\nconst handleToggleClick = () => {\n  checked = !checked;\n}\n</script>\n\n<span class:checked class=\"toggleButton\">\n  <Button on:click on:click={handleToggleClick} {label} {disabled} {keyboard} {hint} />\n</span>\n\n<style>\n  .toggleButton {\n    display: inline-flex;\n  }\n  .toggleButton > :global(*) {\n    flex: 1;\n  }\n  .toggleButton > :global(*)::before {\n    content: '';\n    display: inline-block;\n    border-radius: 8px;\n    width: 8px;\n    height: 8px;\n    margin-right: 4px;\n    background-color: var(--indicator-color);\n    box-shadow: .5px .5px 0px .5px #fff4, -.5px -.5px 0px .5px #0004, inset 1px 1px 0 0 #fff9, inset -1px -1px 0 0 #0006;\n    border: 1px solid #000c;\n  }\n  .toggleButton {\n    --indicator-color: #333;\n  }\n  .checked {\n    --indicator-color: #f35;\n  }\n</style>",
    "<div class=\"toolbar\">\n  <slot/>\n</div>\n\n<style>\n  .toolbar {\n    display: flex;\n  }\n  .toolbar :global(.property), .toolbar :global(.field) {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  .toolbar :global(.property__label), .toolbar :global(.field__label) {\n    flex:0;\n    padding-left: 2px;\n    padding-right: 2px\n  }\n  .toolbar > :global(:last-child) {\n    flex: 1;\n  }\n  .toolbar :global(.property__controls), .toolbar :global(.field__controls) {\n    width: fit-content;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}